// SPDX-License-Identifier: MIT
// solhint-disable-next-line
pragma solidity 0.7.6;

import "ds-test/test.sol";
import "../myExploit.sol";

interface CheatCodes {
    function record() external; // Record all storage reads and writes
    function accesses(address) external returns (bytes32[] memory reads, bytes32[] memory writes); 
    function load(address account, bytes32 slot) external returns (bytes32);
    function store(address account, bytes32 slot, bytes32 value) external;
    function deal(address, uint) external;
}

contract myExploitTest is DSTest {
    CheatCodes cheats = CheatCodes(HEVM_ADDRESS);
    myExploit exploit;
    event testAddress(address);
    function setUp() public {
        emit testAddress(address(this));
        exploit = new myExploit{value:51 ether}();
    }
    function testViewIsSolved() public {
        cheats.record();
        cheats.load(exploit.challengeAddress(), hex"0000000000000000000000000000000000000000000000000000000000000005");
        cheats.store(exploit.challengeAddress(),
            hex"0000000000000000000000000000000000000000000000000000000000000005",
            hex"0000000000000000000000deaDDeADDEaDdeaDdEAddEADDEAdDeadDEADDEaD12");
        cheats.store(exploit.challengeAddress(),
            hex"3c11f783dbd1ff293f3b738beb958568cd23e3f7bb0f5efcb90a240ffdf4d550",
            hex"0000000000000000000000000000000000000000000000000000000000000000");
        cheats.deal(exploit.challengeAddress(), 0);
        assertTrue(exploit.setup().isSolved());
        cheats.accesses(address(exploit.challengeInterface()));
    }

    function testViewSlot0x0b() public {
        cheats.record();
        exploit.storeInSlot0x0b();
        cheats.load(exploit.challengeAddress(), hex"000000000000000000000000000000000000000000000000000000000000000b");
        cheats.accesses(address(exploit.challengeInterface()));
    }

    function testJumpFromBuyTokens() public {
        exploit.storeInSlot0x0b();
        // exploit.jumpToLocationInSlot0x0b();
        cheats.load(exploit.challengeAddress(), hex"0000000000000000000000000000000000000000000000000000000000000006");

    }

    function testStep2() public {
        exploit.step1();
        exploit.step2();
        assertTrue(exploit.setup().isSolved() == true);
    }
}